{"version":3,"sources":["../src/carpetplot-ctrl.js"],"names":["MetricsPanelCtrl","_","contextSrv","createConverter","aggregates","fragments","rendering","panelDefaults","aggregate","AVG","fragment","HOUR","color","colorScheme","nullColor","scale","min","max","colorSchemes","name","value","invert","CarpetPlotCtrl","$scope","$injector","$rootScope","timeSrv","onDataReceived","dataList","converter","panel","timeRange","from","to","data","convertData","render","theme","user","lightTheme","defaultsDeep","events","on","scope","elem","attrs","ctrl","templateUrl"],"mappings":"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","file":"carpetplot-ctrl.js","sourcesContent":["import { MetricsPanelCtrl } from 'app/plugins/sdk';\r\nimport _ from 'lodash';\r\nimport { contextSrv } from 'app/core/core';\r\n\r\nimport createConverter from './data-converter';\r\nimport aggregates from './aggregates';\r\nimport fragments from './fragments';\r\nimport rendering from './rendering';\r\nimport './css/carpet-plot.css!';\r\n\r\nconst panelDefaults = {\r\n  aggregate: aggregates.AVG,\r\n  fragment: fragments.HOUR,\r\n  color: {\r\n    colorScheme: 'interpolateRdYlGn',\r\n    nullColor: 'transparent'\r\n  },\r\n  scale: {\r\n    min: null,\r\n    max: null\r\n  }\r\n};\r\n\r\nconst colorSchemes = [\r\n  // Diverging\r\n  { name: 'Spectral', value: 'interpolateSpectral', invert: 'always' },\r\n  { name: 'RdYlGn', value: 'interpolateRdYlGn', invert: 'always' },\r\n\r\n  // Sequential (Single Hue)\r\n  { name: 'Blues', value: 'interpolateBlues', invert: 'dark' },\r\n  { name: 'Greens', value: 'interpolateGreens', invert: 'dark' },\r\n  { name: 'Greys', value: 'interpolateGreys', invert: 'dark' },\r\n  { name: 'Oranges', value: 'interpolateOranges', invert: 'dark' },\r\n  { name: 'Purples', value: 'interpolatePurples', invert: 'dark' },\r\n  { name: 'Reds', value: 'interpolateReds', invert: 'dark' },\r\n\r\n  // Sequential (Multi-Hue)\r\n  { name: 'BuGn', value: 'interpolateBuGn', invert: 'dark' },\r\n  { name: 'BuPu', value: 'interpolateBuPu', invert: 'dark' },\r\n  { name: 'GnBu', value: 'interpolateGnBu', invert: 'dark' },\r\n  { name: 'OrRd', value: 'interpolateOrRd', invert: 'dark' },\r\n  { name: 'PuBuGn', value: 'interpolatePuBuGn', invert: 'dark' },\r\n  { name: 'PuBu', value: 'interpolatePuBu', invert: 'dark' },\r\n  { name: 'PuRd', value: 'interpolatePuRd', invert: 'dark' },\r\n  { name: 'RdPu', value: 'interpolateRdPu', invert: 'dark' },\r\n  { name: 'YlGnBu', value: 'interpolateYlGnBu', invert: 'dark' },\r\n  { name: 'YlGn', value: 'interpolateYlGn', invert: 'dark' },\r\n  { name: 'YlOrBr', value: 'interpolateYlOrBr', invert: 'dark' },\r\n  { name: 'YlOrRd', value: 'interpolateYlOrRd', invert: 'darm' }\r\n];\r\n\r\nexport class CarpetPlotCtrl extends MetricsPanelCtrl {\r\n  static templateUrl = 'module.html';\r\n\r\n  constructor($scope, $injector, $rootScope, timeSrv) {\r\n    super($scope, $injector);\r\n\r\n    this.data = {};\r\n    this.timeSrv = timeSrv;\r\n    this.colorSchemes = colorSchemes;\r\n    this.theme = contextSrv.user.lightTheme ? 'light' : 'dark';\r\n\r\n    _.defaultsDeep(this.panel, panelDefaults);\r\n\r\n    this.events.on('data-received', this.onDataReceived);\r\n    this.events.on('data-snapshot-load', this.onDataReceived);\r\n  }\r\n\r\n  onDataReceived = (dataList) => {\r\n    // TODO - dynamic params\r\n    const converter = createConverter(this.panel.aggregate, this.panel.fragment);\r\n    const { from, to } = this.timeSrv.timeRange();\r\n    this.data = converter.convertData(from, to, dataList);\r\n    this.render();\r\n  }\r\n\r\n\r\n\r\n  link(scope, elem, attrs, ctrl) {\r\n    rendering(scope, elem, attrs, ctrl);\r\n  }\r\n}"]}