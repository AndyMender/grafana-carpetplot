{"version":3,"sources":["../src/carpetplot-ctrl.js"],"names":["MetricsPanelCtrl","_","contextSrv","kbn","createConverter","aggregates","fragments","rendering","carpetplotOptionsEditor","panelDefaults","aggregate","AVG","fragment","HOUR","color","colorScheme","nullColor","scale","min","max","xAxis","show","yAxis","format","tooltip","decimals","legend","colorSchemes","name","value","invert","fragmentOptions","MINUTE","QUARTER","aggregateOptions","SUM","CNT","CarpetPlotCtrl","$scope","$injector","$rootScope","timeSrv","onDataReceived","dataList","data","transformData","render","onInitEditMode","addEditorTab","unitFormats","getUnitFormats","onRender","theme","user","lightTheme","defaultsDeep","panel","events","on","converter","timeRange","from","to","convertData","scope","elem","attrs","ctrl","templateUrl"],"mappings":"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","file":"carpetplot-ctrl.js","sourcesContent":["import { MetricsPanelCtrl } from 'app/plugins/sdk';\r\nimport _ from 'lodash';\r\nimport { contextSrv } from 'app/core/core';\r\nimport kbn from 'app/core/utils/kbn';\r\n\r\nimport createConverter from './data-converter';\r\nimport aggregates from './aggregates';\r\nimport fragments from './fragments';\r\nimport rendering from './rendering';\r\nimport { carpetplotOptionsEditor } from './options-editor';\r\nimport './css/carpet-plot.css!';\r\n\r\nconst panelDefaults = {\r\n  aggregate: aggregates.AVG,\r\n  fragment: fragments.HOUR,\r\n  color: {\r\n    colorScheme: 'interpolateRdYlGn',\r\n    nullColor: 'transparent'\r\n  },\r\n  scale: {\r\n    min: null,\r\n    max: null\r\n  },\r\n  xAxis: {\r\n    show: true\r\n  },\r\n  yAxis: {\r\n    format: 'short',\r\n    show: true\r\n  },\r\n  tooltip: {\r\n    show: true,\r\n    decimals: null\r\n  },\r\n  legend: {\r\n    show: true\r\n  }\r\n};\r\n\r\nconst colorSchemes = [\r\n  // Diverging\r\n  { name: 'Spectral', value: 'interpolateSpectral', invert: 'always' },\r\n  { name: 'RdYlGn', value: 'interpolateRdYlGn', invert: 'always' },\r\n\r\n  // Sequential (Single Hue)\r\n  { name: 'Blues', value: 'interpolateBlues', invert: 'dark' },\r\n  { name: 'Greens', value: 'interpolateGreens', invert: 'dark' },\r\n  { name: 'Greys', value: 'interpolateGreys', invert: 'dark' },\r\n  { name: 'Oranges', value: 'interpolateOranges', invert: 'dark' },\r\n  { name: 'Purples', value: 'interpolatePurples', invert: 'dark' },\r\n  { name: 'Reds', value: 'interpolateReds', invert: 'dark' },\r\n\r\n  // Sequential (Multi-Hue)\r\n  { name: 'BuGn', value: 'interpolateBuGn', invert: 'dark' },\r\n  { name: 'BuPu', value: 'interpolateBuPu', invert: 'dark' },\r\n  { name: 'GnBu', value: 'interpolateGnBu', invert: 'dark' },\r\n  { name: 'OrRd', value: 'interpolateOrRd', invert: 'dark' },\r\n  { name: 'PuBuGn', value: 'interpolatePuBuGn', invert: 'dark' },\r\n  { name: 'PuBu', value: 'interpolatePuBu', invert: 'dark' },\r\n  { name: 'PuRd', value: 'interpolatePuRd', invert: 'dark' },\r\n  { name: 'RdPu', value: 'interpolateRdPu', invert: 'dark' },\r\n  { name: 'YlGnBu', value: 'interpolateYlGnBu', invert: 'dark' },\r\n  { name: 'YlGn', value: 'interpolateYlGn', invert: 'dark' },\r\n  { name: 'YlOrBr', value: 'interpolateYlOrBr', invert: 'dark' },\r\n  { name: 'YlOrRd', value: 'interpolateYlOrRd', invert: 'darm' }\r\n];\r\n\r\nconst fragmentOptions = [\r\n  { name: 'Minute', value: fragments.MINUTE },\r\n  { name: '15 minutes', value: fragments.QUARTER },\r\n  { name: 'Hour', value: fragments.HOUR }\r\n];\r\n\r\nconst aggregateOptions = [\r\n  { name: 'Average', value: aggregates.AVG },\r\n  { name: 'Sum', value: aggregates.SUM },\r\n  { name: 'Count', value: aggregates.CNT },\r\n];\r\n\r\nexport class CarpetPlotCtrl extends MetricsPanelCtrl {\r\n  static templateUrl = 'module.html';\r\n\r\n  constructor($scope, $injector, $rootScope, timeSrv) {\r\n    super($scope, $injector);\r\n\r\n    this.dataList = null;\r\n    this.data = {};\r\n    this.timeSrv = timeSrv;\r\n    this.colorSchemes = colorSchemes;\r\n    this.fragmentOptions = fragmentOptions;\r\n    this.aggregateOptions = aggregateOptions;\r\n    this.theme = contextSrv.user.lightTheme ? 'light' : 'dark';\r\n\r\n    _.defaultsDeep(this.panel, panelDefaults);\r\n\r\n    this.events.on('data-received', this.onDataReceived);\r\n    this.events.on('data-snapshot-load', this.onDataReceived);\r\n    this.events.on('init-edit-mode', this.onInitEditMode);\r\n    this.events.on('render', this.onRender);\r\n  }\r\n\r\n  onDataReceived = (dataList) => {\r\n    this.dataList = dataList;\r\n    this.data = this.transformData(dataList);\r\n    this.render();\r\n  }\r\n\r\n  onInitEditMode = () => {\r\n    this.addEditorTab('Options', carpetplotOptionsEditor, 2);\r\n    this.unitFormats = kbn.getUnitFormats();\r\n  }\r\n\r\n  onRender = () => {\r\n    if (!this.dataList) { return; }\r\n    this.data = this.transformData(this.dataList);\r\n  }\r\n\r\n  transformData(data) {\r\n    const converter = createConverter(this.panel.aggregate, this.panel.fragment);\r\n    const { from, to } = this.timeSrv.timeRange();\r\n    return converter.convertData(from, to, data);\r\n  }\r\n\r\n  link(scope, elem, attrs, ctrl) {\r\n    rendering(scope, elem, attrs, ctrl);\r\n  }\r\n}"]}