{"version":3,"sources":["../src/fragments.js"],"names":["moment","MINUTE","QUARTER","HOUR","fragments","count","getBucketIndex","time","hour","minute","getBucket","timestamp","startOf","unix","nextTime","utc","add","Math","floor","timeUtc","minutes","getFragment","fragmentType"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAOA,Y;;;AAEDC,Y,GAAS,Q;AACTC,a,GAAU,S;AACVC,U,GAAO,M;AAEPC,e,iDACHH,M,EAAS;AACRI,eAAO,IADC;AAERC,wBAAgB,wBAACC,IAAD;AAAA,iBAAUA,KAAKC,IAAL,KAAc,EAAd,GAAmBD,KAAKE,MAAL,EAA7B;AAAA,SAFR;AAGRC,mBAAW,mBAACC,SAAD;AAAA,iBAAeX,OAAOW,SAAP,EAAkBC,OAAlB,CAA0B,QAA1B,EAAoCC,IAApC,EAAf;AAAA,SAHH;AAIRC,kBAAU,kBAACP,IAAD;AAAA,iBAAUP,OAAOe,GAAP,CAAWR,IAAX,EAAiBS,GAAjB,CAAqB,CAArB,EAAwB,QAAxB,CAAV;AAAA;AAJF,O,+BAMTd,O,EAAU;AACTG,eAAO,EADE;AAETC,wBAAgB,wBAACC,IAAD;AAAA,iBAAUA,KAAKC,IAAL,KAAc,CAAd,GAAkBS,KAAKC,KAAL,CAAWX,KAAKE,MAAL,KAAgB,EAA3B,CAA5B;AAAA,SAFP;AAGTC,mBAAW,mBAACC,SAAD,EAAe;AACxB,cAAMQ,UAAUnB,OAAOW,SAAP,CAAhB;AACA,cAAMS,UAAUH,KAAKC,KAAL,CAAWC,QAAQV,MAAR,KAAmB,EAA9B,IAAoC,EAApD;AACA,iBAAOU,QAAQP,OAAR,CAAgB,MAAhB,EAAwBI,GAAxB,CAA4BI,OAA5B,EAAqC,QAArC,EAA+CP,IAA/C,EAAP;AACD,SAPQ;AAQTC,kBAAU,kBAACP,IAAD;AAAA,iBAAUP,OAAOe,GAAP,CAAWR,IAAX,EAAiBS,GAAjB,CAAqB,EAArB,EAAyB,QAAzB,CAAV;AAAA;AARD,O,+BAUVb,I,EAAO;AACNE,eAAO,EADD;AAENC,wBAAgB,wBAACC,IAAD;AAAA,iBAAUA,KAAKC,IAAL,EAAV;AAAA,SAFV;AAGNE,mBAAW,mBAACC,SAAD;AAAA,iBAAeX,OAAOW,SAAP,EAAkBC,OAAlB,CAA0B,MAA1B,EAAkCC,IAAlC,EAAf;AAAA,SAHL;AAINC,kBAAU,kBAACP,IAAD;AAAA,iBAAUP,OAAOe,GAAP,CAAWR,IAAX,EAAiBS,GAAjB,CAAqB,CAArB,EAAwB,MAAxB,CAAV;AAAA;AAJJ,O;;6BAQGK,W,GAAc,SAAdA,WAAc,CAACC,YAAD;AAAA,eAAkBlB,UAAUkB,YAAV,CAAlB;AAAA,O;;;;yBAEZ;AACbnB,kBADa;AAEbD,wBAFa;AAGbD;AAHa,O","file":"fragments.js","sourcesContent":["import moment from 'moment';\r\n\r\nconst MINUTE = 'MINUTE';\r\nconst QUARTER = 'QUARTER';\r\nconst HOUR = 'HOUR';\r\n\r\nconst fragments = {\r\n  [MINUTE]: {\r\n    count: 1440,\r\n    getBucketIndex: (time) => time.hour() * 60 + time.minute(),\r\n    getBucket: (timestamp) => moment(timestamp).startOf('minute').unix(),\r\n    nextTime: (time) => moment.utc(time).add(1, 'minute')\r\n  },\r\n  [QUARTER]: {\r\n    count: 96,\r\n    getBucketIndex: (time) => time.hour() * 4 + Math.floor(time.minute() / 15),\r\n    getBucket: (timestamp) => {\r\n      const timeUtc = moment(timestamp);\r\n      const minutes = Math.floor(timeUtc.minute() / 15) * 15;\r\n      return timeUtc.startOf('hour').add(minutes, 'minute').unix();\r\n    },\r\n    nextTime: (time) => moment.utc(time).add(15, 'minute')\r\n  },\r\n  [HOUR]: {\r\n    count: 24,\r\n    getBucketIndex: (time) => time.hour(),\r\n    getBucket: (timestamp) => moment(timestamp).startOf('hour').unix(),\r\n    nextTime: (time) => moment.utc(time).add(1, 'hour')\r\n  }\r\n};\r\n\r\nexport const getFragment = (fragmentType) => fragments[fragmentType];\r\n\r\nexport default {\r\n  HOUR,\r\n  QUARTER,\r\n  MINUTE\r\n};"]}